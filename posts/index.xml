<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Christian Lim</title>
        <link>http://callim105.github.io/posts/</link>
        <description>All Posts | Christian Lim</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>christiananthonylim1@gmail.com (Christian Lim)</managingEditor>
            <webMaster>christiananthonylim1@gmail.com (Christian Lim)</webMaster><lastBuildDate>Tue, 17 Aug 2021 21:36:32 -0500</lastBuildDate><atom:link href="http://callim105.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Design FB News Feed</title>
    <link>http://callim105.github.io/posts/fb_newsfeed/</link>
    <pubDate>Tue, 17 Aug 2021 21:36:32 -0500</pubDate>
    <author>Author</author>
    <guid>http://callim105.github.io/posts/fb_newsfeed/</guid>
    <description><![CDATA[Overview Problem: Design a news feed system. What&rsquo;s a news feed?
 &ldquo;News feed is the constantly updating list of stories in the middle of your homepage. News feed includes status updates, photos, videos, links, app activity and likes from people, pages, and groups that you follow on Facebook.&rdquo;
 Step 1: Understand the problem and scope Make sure to ask clarifying questions to gauge the scope of the problem which you have to design around.]]></description>
</item><item>
    <title>DDIA Notes Ch.6: Partitioning</title>
    <link>http://callim105.github.io/posts/ddia_ch6/</link>
    <pubDate>Tue, 10 Aug 2021 21:26:38 -0500</pubDate>
    <author>Author</author>
    <guid>http://callim105.github.io/posts/ddia_ch6/</guid>
    <description><![CDATA[Ch 6: Partitioning Note: These are my notes from reading chapter 6 of Designing Data Intensive applications.
For large datasets, or very high query throughput, we need to break the data up into partitions, also known as sharding.
 In effect, each partition is a small database of its own.  Partitioning and Replication Basically, you can use both partitioning and replication together to have high availability. You can have copies of each partition stored on multiple nodes.]]></description>
</item><item>
    <title>Invert binary tree</title>
    <link>http://callim105.github.io/posts/invert_binary_tree/</link>
    <pubDate>Tue, 10 Aug 2021 12:23:50 -0500</pubDate>
    <author>Author</author>
    <guid>http://callim105.github.io/posts/invert_binary_tree/</guid>
    <description><![CDATA[Invert a Binary Tree Overview &amp; Problem Space Problem: Write a function that takes in a Binary Tree and inverts it. The function should swap every left node in the tree for its corresponding right node. Each BinaryTree node has an integer value, a left child node and a right child node. Children nodes can either be BinaryTree nodes themselves or None/null.
Theory I like this problem because its a classic and the solution is actually really clean.]]></description>
</item><item>
    <title>Example post</title>
    <link>http://callim105.github.io/posts/second-post/</link>
    <pubDate>Thu, 05 Aug 2021 20:51:32 -0500</pubDate>
    <author>Author</author>
    <guid>http://callim105.github.io/posts/second-post/</guid>
    <description><![CDATA[This is my second post I have no idea what I am doing :)
This is a section Blah blah blah
Third Section Will this index?
1 2  def hello(): print(&#34;Hello world!&#34;)   CORGI SECTION!!!! This is a corgi! I hope. Smaller section This is a smaller section.
Medium Section Yuuuup.
Youtube Embedding This is embedded with Hugo shortcode!
  Tweet Embedding Hugo 0.24 Released: Big archetype update + @Netlify _redirects etc.]]></description>
</item></channel>
</rss>
